{"ast":null,"code":"var _jsxFileName = \"/home/gabriela/trybe-exercises/exercises/bloco_11_Intro_React/dia_3_estado_e_Evento/fancy-buttons/src/App.js\";\nimport './App.css';\nimport Button1 from './Button1';\nimport Button2 from './Button2';\nimport Button3 from './Button3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button1, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Button2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Button3, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n\n_c = App;\nexport default App;\n/* \nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    // A função abaixo vincula \"manualmente\" o `this` à nossa função\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick() {\n    /* Agora esse log retorna o objeto `this`, já acessível para nossa função!\n    Com isso, podemos acessar as `props`, estado do componente (ainda vamos ver como!)\n    e tudo o mais daqui de dentro */\n\n/*    console.log(this)\n   console.log('Clicou!')\n }\n  render() {\n   return <button onClick={this.handleClick}>Meu botão</button>\n }\n}\nexport default App; */\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/gabriela/trybe-exercises/exercises/bloco_11_Intro_React/dia_3_estado_e_Evento/fancy-buttons/src/App.js"],"names":["Button1","Button2","Button3","App"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;;AAEA,SAASC,GAAT,GAAe;AACb,sBACE;AAAA,4BACD,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADC,eAED,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAFC,eAGD,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAHC;AAAA,kBADF;AAOD;;KARQA,G;AAUT,eAAeA,GAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC;AACD;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import './App.css';\nimport Button1 from './Button1'\nimport Button2 from './Button2';\nimport Button3 from './Button3';\n\nfunction App() {\n  return (\n    <>\n   <Button1 />\n   <Button2 />\n   <Button3 />\n   </>\n  );\n}\n\nexport default App;\n/* \nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    // A função abaixo vincula \"manualmente\" o `this` à nossa função\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick() {\n    /* Agora esse log retorna o objeto `this`, já acessível para nossa função!\n    Com isso, podemos acessar as `props`, estado do componente (ainda vamos ver como!)\n    e tudo o mais daqui de dentro */\n /*    console.log(this)\n    console.log('Clicou!')\n  }\n\n  render() {\n    return <button onClick={this.handleClick}>Meu botão</button>\n  }\n}\n\nexport default App; */\n"]},"metadata":{},"sourceType":"module"}